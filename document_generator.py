
from datetime import datetime
from docx import Document
from docx.shared import Pt, RGBColor, Inches
from docx.enum.text import WD_PARAGRAPH_ALIGNMENT
from docx.oxml.ns import qn
from docx.oxml import OxmlElement

def set_doc_styles(doc):
    """Set document styles"""
    styles = doc.styles
    font_name = 'Calibri'
    
    for style in styles:
        if style.type == 1:  # Paragraph style
            style.font.name = font_name
            style._element.rPr.rFonts.set(qn('w:eastAsia'), font_name)
    
    doc.styles['Normal'].font.size = Pt(11)
    doc.styles['Heading 1'].font.size = Pt(16)
    doc.styles['Heading 1'].font.bold = True
    doc.styles['Heading 1'].font.color.rgb = RGBColor(0, 0, 0)
    doc.styles['Heading 2'].font.size = Pt(14)
    doc.styles['Heading 2'].font.bold = True
    doc.styles['Heading 2'].font.color.rgb = RGBColor(0, 0, 0)

def add_custom_header(doc, text):
    """Add custom header to document"""
    section = doc.sections[0]
    header = section.header
    paragraph = header.paragraphs[0] if header.paragraphs else header.add_paragraph()
    paragraph.alignment = WD_PARAGRAPH_ALIGNMENT.RIGHT
    
    run = paragraph.add_run(text)
    run.font.name = 'Calibri'
    run.font.size = Pt(10)
    run.font.color.rgb = RGBColor(128, 128, 128)

def add_table_of_contents(doc):
    """Add table of contents to document"""
    paragraph = doc.add_paragraph()
    run = paragraph.add_run()
    fldChar = OxmlElement('w:fldChar')
    fldChar.set(qn('w:fldCharType'), 'begin')
    run._r.append(fldChar)
    
    instrText = OxmlElement('w:instrText')
    instrText.set(qn('xml:space'), 'preserve')
    instrText.text = 'TOC \\o "1-3" \\h \\z \\u'
    run._r.append(instrText)
    
    fldChar = OxmlElement('w:fldChar')
    fldChar.set(qn('w:fldCharType'), 'separate')
    run._r.append(fldChar)
    
    fldChar = OxmlElement('w:fldChar')
    fldChar.set(qn('w:fldCharType'), 'end')
    run._r.append(fldChar)
    
    doc.add_paragraph()

def add_section(doc, title, content, level=1):
    """Add a section to the document"""
    doc.add_heading(title, level=level)
    if isinstance(content, list):
        for item in content:
            if isinstance(item, dict):
                for key, value in item.items():
                    p = doc.add_paragraph(style='List Bullet')
                    p.add_run(f"{key}: ").bold = True
                    p.add_run(str(value))
            else:
                doc.add_paragraph(str(item), style='List Bullet')
    elif isinstance(content, dict):
        for key, value in content.items():
            p = doc.add_paragraph()
            p.add_run(f"{key}: ").bold = True
            p.add_run(str(value))
    else:
        doc.add_paragraph(str(content))

def create_rfq_document(rfq_data, output_path):
    """Create RFQ document from data"""
    try:
        doc = Document()
        set_doc_styles(doc)
        add_custom_header(doc, "RFQ Generated by RFQRocket")
        
        doc.add_heading('REQUEST FOR QUOTATION', level=0)
        doc.add_paragraph(datetime.now().strftime('%B %d, %Y'))
        doc.add_paragraph()
        
        add_table_of_contents(doc)
        
        section_order = [
            ('GENERAL_INFORMATION', '1. General Information'),
            ('REQUIREMENTS', '2. Technical Requirements'),
            ('DELIVERABLES', '3. Deliverables'),
            ('PERIOD_OF_PERFORMANCE', '4. Period of Performance'),
            ('EVALUATION_CRITERIA', '5. Evaluation Criteria'),
            ('SUBMISSION_REQUIREMENTS', '6. Submission Requirements'),
            ('TERMS_AND_CONDITIONS', '7. Terms and Conditions'),
            ('CONTACT_INFORMATION', '8. Contact Information')
        ]
        
        for section_key, section_title in section_order:
            if section_key in rfq_data and rfq_data[section_key]:
                add_section(doc, section_title, rfq_data[section_key], level=1)
        
        doc.add_page_break()
        doc.save(output_path)
        return True
    except Exception as e:
        print(f"Error creating document: {str(e)}")
        return False
